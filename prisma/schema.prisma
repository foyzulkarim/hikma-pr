// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Review {
  id         String   @id @default(cuid())
  prUrl      String
  state      Json     // LangGraph's state will be stored here as a JSON object
  error      String?  // Optional field to store error messages
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Analysis metadata
  modelProvider String? // LLM provider used (ollama, openai, etc.)
  modelName     String? // Model name used for analysis
  startedAt     DateTime? // When analysis actually started
  completedAt   DateTime? // When analysis completed
  
  // Relationships
  fileAnalyses       FileAnalysis[]
  chunkAnalyses      ChunkAnalysis[]
  analysisPasses     AnalysisPass[]
  pluginFindings     PluginFinding[]
  
  // Enhanced comprehensive analysis relationships
  findings           Finding[]
  recommendations    Recommendation[]
  repositoryContext  RepositoryContext?
  semanticAnalysis   SemanticAnalysis?
  agentAnalyses      AgentAnalysis[]
  qualityValidation  QualityValidation?
}

model FileAnalysis {
  id         String   @id @default(cuid())
  reviewId   String   // Foreign key to Review
  fileName   String   // Name/path of the analyzed file
  analysis   String   // The LLM analysis text for this file
  diffSize   Int?     // Size of the diff in characters (optional)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationship to review
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@unique([reviewId, fileName]) // Ensure one analysis per file per review
}

// New models for enhanced multi-pass analysis tracking
model ChunkAnalysis {
  id             String   @id @default(cuid())
  reviewId       String
  chunkId        String   @unique // UUID for the chunk
  filePath       String
  startLine      Int?
  endLine        Int?
  sizeTokens     Int
  diffContent    String
  isCompleteFile Boolean  @default(false)
  contextBefore  String?
  contextAfter   String?
  createdAt      DateTime @default(now())
  
  // Relationships
  review         Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  analysisPasses AnalysisPass[]
  pluginFindings PluginFinding[]
}

model AnalysisPass {
  id              String   @id @default(cuid())
  reviewId        String
  chunkId         String
  passType        String   // syntax_logic, security_performance, architecture_design, testing_docs
  analysisResult  String   // Full LLM response
  riskLevel       String   // LOW, MEDIUM, HIGH, CRITICAL
  issuesFound     Json     // Array of extracted issues
  recommendations Json     // Array of extracted recommendations
  tokensUsed      Int
  durationMs      Int
  createdAt       DateTime @default(now())
  
  // Relationships
  review          Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  chunk           ChunkAnalysis @relation(fields: [chunkId], references: [chunkId], onDelete: Cascade)
  
  @@unique([chunkId, passType]) // Ensure one pass of each type per chunk
}

model PluginFinding {
  id          String   @id @default(cuid())
  reviewId    String
  chunkId     String
  pluginId    String   // Plugin identifier
  pluginName  String   // Human-readable plugin name
  message     String   // Finding message
  severity    String   // info, warning, error
  line        Int?     // Optional line number
  createdAt   DateTime @default(now())
  
  // Relationships
  review      Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  chunk       ChunkAnalysis @relation(fields: [chunkId], references: [chunkId], onDelete: Cascade)
}

// Enhanced models for comprehensive analysis system
model Finding {
  id          String   @id
  reviewId    String
  type        String
  severity    String   // low, medium, high, critical
  message     String
  file        String
  lineNumber  Int?
  evidence    Json     // Array of evidence strings
  createdAt   DateTime @default(now())
  
  // Relationships
  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id             String   @id
  reviewId       String
  priority       String   // must-fix, should-fix, consider
  category       String
  description    String
  rationale      String
  implementation String
  effort         String   // low, medium, high
  createdAt      DateTime @default(now())
  
  // Relationships
  review         Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model RepositoryContext {
  id                    String   @id @default(cuid())
  reviewId              String   @unique
  repoUrl               String
  repoPath              String
  changedFiles          Json     // Array of changed file paths
  codebaseMap           Json     // Codebase structure and metrics
  architecturalPatterns Json     // Array of detected patterns
  historicalPatterns    Json     // Array of historical patterns
  dependencyGraph       Json     // Dependency graph data
  qualityMetrics        Json     // Quality metrics
  createdAt             DateTime @default(now())
  
  // Relationships
  review                Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model SemanticAnalysis {
  id                  String   @id @default(cuid())
  reviewId            String   @unique
  functionSignatures  Json     // Array of function signatures
  typeDefinitions     Json     // Array of type definitions
  importExportChains  Json     // Array of import/export chains
  callGraphs          Json     // Array of call graph data
  dataFlows           Json     // Array of data flow information
  createdAt           DateTime @default(now())
  
  // Relationships
  review              Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model AgentAnalysis {
  id            String   @id @default(cuid())
  reviewId      String
  agentType     String   // architectural, security, performance, testing
  findings      Json     // Array of findings from this agent
  recommendations Json   // Array of recommendations from this agent
  riskLevel     String   // LOW, MEDIUM, HIGH, CRITICAL
  confidence    Float    // Confidence score 0.0-1.0
  metadata      Json     // Additional agent-specific metadata
  createdAt     DateTime @default(now())
  
  // Relationships
  review        Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@unique([reviewId, agentType]) // One analysis per agent type per review
}

model QualityValidation {
  id                String   @id @default(cuid())
  reviewId          String   @unique
  completenessScore Float
  consistencyScore  Float
  actionabilityScore Float
  evidenceScore     Float
  overallScore      Float
  validationIssues  Json     // Array of validation issues found
  createdAt         DateTime @default(now())
  
  // Relationships
  review            Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}
