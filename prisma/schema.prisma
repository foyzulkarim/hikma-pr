// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:/Users/foyzul/.hikmapr/reviews.db"
}

model Review {
  id         String   @id @default(cuid())
  prUrl      String
  state      Json     // LangGraph's state will be stored here as a JSON object
  error      String?  // Optional field to store error messages
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationships
  fileAnalyses   FileAnalysis[]
  chunkAnalyses  ChunkAnalysis[]
  analysisPasses AnalysisPass[]
}

model FileAnalysis {
  id         String   @id @default(cuid())
  reviewId   String   // Foreign key to Review
  fileName   String   // Name/path of the analyzed file
  analysis   String   // The LLM analysis text for this file
  diffSize   Int?     // Size of the diff in characters (optional)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationship to review
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@unique([reviewId, fileName]) // Ensure one analysis per file per review
}

// New models for enhanced multi-pass analysis tracking
model ChunkAnalysis {
  id             String   @id @default(cuid())
  reviewId       String
  chunkId        String   @unique // UUID for the chunk
  filePath       String
  startLine      Int?
  endLine        Int?
  sizeTokens     Int
  diffContent    String
  isCompleteFile Boolean  @default(false)
  contextBefore  String?
  contextAfter   String?
  createdAt      DateTime @default(now())
  
  // Relationships
  review         Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  analysisPasses AnalysisPass[]
}

model AnalysisPass {
  id              String   @id @default(cuid())
  reviewId        String
  chunkId         String
  passType        String   // syntax_logic, security_performance, architecture_design, testing_docs
  analysisResult  String   // Full LLM response
  riskLevel       String   // LOW, MEDIUM, HIGH, CRITICAL
  issuesFound     Json     // Array of extracted issues
  recommendations Json     // Array of extracted recommendations
  tokensUsed      Int
  durationMs      Int
  createdAt       DateTime @default(now())
  
  // Relationships
  review          Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  chunk           ChunkAnalysis @relation(fields: [chunkId], references: [chunkId], onDelete: Cascade)
  
  @@unique([chunkId, passType]) // Ensure one pass of each type per chunk
}
