// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:/Users/foyzul/.hikmapr/reviews.db"
}

model Review {
  id         String   @id @default(cuid())
  prUrl      String
  state      Json     // LangGraph's state will be stored here as a JSON object
  error      String?  // Optional field to store error messages
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationships
  fileAnalyses  FileAnalysis[]
  chunkAnalyses ChunkAnalysis[]
  analysisPasses AnalysisPass[]
}

model FileAnalysis {
  id         String   @id @default(cuid())
  reviewId   String   // Foreign key to Review
  fileName   String   // Name/path of the analyzed file
  analysis   String   // The LLM analysis text for this file
  diffSize   Int?     // Size of the diff in characters (optional)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationship to review
  review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  @@unique([reviewId, fileName]) // Ensure one analysis per file per review
}

model ChunkAnalysis {
  id              String   @id @default(cuid())
  reviewId        String   // Foreign key to Review
  chunkId         String   // Unique identifier for the chunk
  filePath        String   // Path of the file this chunk belongs to
  startLine       Int?     // Starting line number (optional)
  endLine         Int?     // Ending line number (optional)
  sizeTokens      Int      // Estimated token count for this chunk
  diffContent     String   // The actual diff content for this chunk
  isCompleteFile  Boolean  @default(false) // Whether this chunk represents the entire file
  contextBefore   String?  // Context from previous chunks (optional)
  contextAfter    String?  // Context for next chunks (optional)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationship to review
  review          Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  
  // Relationship to analysis passes
  analysisPasses  AnalysisPass[]
  
  @@unique([reviewId, chunkId]) // Ensure one chunk record per review
}

model AnalysisPass {
  id              String   @id @default(cuid())
  reviewId        String   // Foreign key to Review
  chunkId         String   // Foreign key to ChunkAnalysis
  passType        String   // Type of analysis pass (syntax_logic, security_performance, etc.)
  analysisResult  String   // Full analysis text from LLM
  riskLevel       String   // Risk level: LOW, MEDIUM, HIGH, CRITICAL
  issuesFound     Json     // Array of issues found (stored as JSON)
  recommendations Json     // Array of recommendations (stored as JSON)
  tokensUsed      Int      // Number of tokens used for this analysis
  durationMs      Int      // Duration of analysis in milliseconds
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  review          Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  chunkAnalysis   ChunkAnalysis @relation(fields: [reviewId, chunkId], references: [reviewId, chunkId], onDelete: Cascade)
  
  @@unique([reviewId, chunkId, passType]) // Ensure one pass per type per chunk per review
}
